class PlayerControler : ZilchComponent
{

  //Chooses wether debug lines are on or not
  [Property]
  var Debug : Boolean = false;
  //Acceleration
  [Property]
  var Speed : Real = 10.0;
  
  //turn accel speed
  [Property]
  var TurnSpeed : Real = 20;
  //this is up / fowar;
  [Property]
  var UpKey : Keys = Keys.W;
   
  Property]
  var LeftKey : Keys = Keys.A;

  [Property]
  var DownKey : Keys = Keys.S;

  [Property]
  var RightKey : Keys = Keys.D;


  function Initialize(init : CogInitializer)
  {
    Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
  }

  function OnLogicUpdate(event : UpdateEvent)
  {
    var movement = Real3();
    var turnValue = Real3();
    var currancle = this.Owner.Transform.EulerAngles. Z + Math.Pi / 2;
    
    
    //check if key is down
    if(Zero.Keyboard.KeyIsDown(this.UpKey))
    {
    //Use for debug
    //Console.WriteLine("/\");
    movement.X += Math.Cos(currancle);
    movement.Y += Math.Sin(currancle);
    }
    
        //check if key is down
    if(Zero.Keyboard.KeyIsDown(this.LeftKey))
    {
    //Use for debug
    //Console.WriteLine("<");
    turnValue.Z += Math.ToRadians(this.TurnSpeed);
    }

    //check if key is down
    if(Zero.Keyboard.KeyIsDown(this.DownKey))
    {
    //Use for debug
    //Console.WriteLine("\/");
    movement.X -= Math.Cos(currancle);
    movement.Y -= Math.Sin(currancle);
    }

    //check if key is down
    if(Zero.Keyboard.KeyIsDown(this.RightKey))
    {
    //Use for debug
    //Console.WriteLine(">");
    turnValue.Z -= Math.ToRadians(this.TurnSpeed);
    }
    
    
    //Increace the velocity
    this.Owner.RigidBody.Velocity += movement * this.Speed * event.Dt;
    //ensure movement is normal
    movement = Math.Normalize(movement);
    var accel = movement * this.Speed;
    //angular velocity
    this.Owner.RigidBody.AngularVelocity += turnValue * event.Dt;
    //increase velosity
    this.Owner.RigidBody.Velocity += accel * event.Dt;
    
    if(this.Debug)
    {
     this.DebugDraw(this.Owner.RigidBody.Velocity, accel);
    }
  
  }
  //this finds debug acceleration
  function DebugDraw (vel :Real3, accel : Real3)
  {
   var veline = DebugLine();
   veline.Start = this.Owner.Transform.Translation;
   veline.End = veline.Start + vel;
   veline.HeadSize = 0.2;
   veline.Color = Real4(0, 1, 0, 1);
   DebugDraw.Add(veline);
 
  
   var acceline = DebugLine();
   acceline.Start = this.Owner.Transform.Translation;
   acceline.End = acceline.Start + accel;
   acceline.HeadSize = 0.2;
   acceline.Color = Real4(0, 1, 0, 1);
   DebugDraw.Add(acceline);
 }
}
}
