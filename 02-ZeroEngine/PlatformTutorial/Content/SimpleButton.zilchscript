/****************************
edited by: Ryan Scheppler
date: 12/17/18
brief: SimpleSound UI feed back for a button, requires a sprite 
and Reactive components
****************************/

class SimpleButton : ZilchComponent
{
  [Dependency]
  var Reactive : Reactive = null;
  [Dependency]
  var Sprite : Sprite = null;
  
  //how long to take for a transition
  [Property]
  var ChangeTime : Real = 0.1;
  //ease to use for transitions
  [Property]
  var ChangeEase : Ease = Ease.QuadInOut;
  
  //the origianl color of the button
  var OrigColor : Real4 = Real4();
  //the original scale of the button
  var OrigScale : Real3 = Real3();
  //color for the button when mouse is over the button
  [Property]
  var HoverColor : Real4 = Real4(0.8, 0, 0, 1);
  //the percent to increase or decrease while mouse is over the button
  [Property]
  var HoverScalePercent : Real = 1.1;
  
  //color to turn when clicked
  [Property]
  var ClickColor : Real4 = Real4(0.3, 0.3, 0.3, 1);
  //scale for when clicked
  var ClickScalePercent : Real = 0.8;
  
  function Initialize(init : CogInitializer)
  {
    //set the original variables to what was in the editor
    this.OrigColor = this.Sprite.VertexColor;
    this.OrigScale = this.Owner.Transform.Scale;
    Zero.Connect( this.Owner, Events.MouseEnter, this.OnMouseEnter);
    Zero.Connect( this.Owner, Events.MouseExit, this.OnMouseExit);
    Zero.Connect(this.Owner, Events.LeftMouseDown, this.OnLeftMouseDown);
    Zero.Connect(this.Owner, Events.LeftMouseUp, this.OnLeftMouseUp);
  }

  function OnLeftMouseUp(event : ViewportMouseEvent)
  {
    this.Owner.Actions.Cancel();
    
    var grp = Action.Group(this.Owner.Actions);
    Action.Property(grp, @this.Sprite.VertexColor, this.OrigColor, 
      this.ChangeTime, this.ChangeEase);
    Action.Property(grp, @this.Owner.Transform.Scale, this.OrigScale,
      this.ChangeTime, this.ChangeEase);
    //this.Sprite.VertexColor = this.OrigColor;
    //this.Owner.Transform.Scale = this.OrigScale;
  }

  function OnLeftMouseDown(event : ViewportMouseEvent)
  {
    this.Owner.Actions.Cancel();
    
    var grp = Action.Group(this.Owner.Actions);
    Action.Property(grp, @this.Sprite.VertexColor, this.ClickColor, 
      this.ChangeTime, this.ChangeEase);
    Action.Property(grp, @this.Owner.Transform.Scale, this.OrigScale * this.ClickScalePercent,
      this.ChangeTime, this.ChangeEase);
    //this.Sprite.VertexColor = this.ClickColor;
    //this.Owner.Transform.Scale = this.OrigScale * this.ClickScalePercent;
  }

  function OnMouseExit(event : ViewportMouseEvent)
  {
    this.Owner.Actions.Cancel();
    
    var grp = Action.Group(this.Owner.Actions);
    Action.Property(grp, @this.Sprite.VertexColor, this.OrigColor, 
      this.ChangeTime, this.ChangeEase);
    Action.Property(grp, @this.Owner.Transform.Scale, this.OrigScale,
      this.ChangeTime, this.ChangeEase);
    
    //this.Sprite.VertexColor = this.OrigColor;
    //this.Owner.Transform.Scale = this.OrigScale;
  }

  function OnMouseEnter(event : ViewportMouseEvent)
  {
    this.Owner.Actions.Cancel();
    
    var grp = Action.Group(this.Owner.Actions);
    Action.Property(grp, @this.Sprite.VertexColor, this.HoverColor, 
      this.ChangeTime, this.ChangeEase);
    Action.Property(grp, @this.Owner.Transform.Scale, this.OrigScale * this.HoverScalePercent,
      this.ChangeTime, this.ChangeEase);
    
    //this.Sprite.VertexColor = this.HoverColor;
    //this.Owner.Transform.Scale = this.OrigScale * this.HoverScalePercent;
  }
}
